"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
protoc -I. -I$GOPATH/src --gogofaster_out=. span.proto tracer_payload.proto agent_payload.proto"""

from builtins import (
    bool,
    float,
    int,
    str,
)
from collections.abc import (
    Iterable,
    Mapping,
)
from google.protobuf.descriptor import (
    Descriptor,
    FileDescriptor,
)
from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer,
    ScalarMap,
)
from google.protobuf.message import (
    Message,
)
from tracer_payload_pb2 import (
    TracerPayload,
)
from typing import (
    Literal,
    final,
)

DESCRIPTOR: FileDescriptor

@final
class AgentPayload(Message):
    """AgentPayload represents payload the agent sends to the intake."""

    DESCRIPTOR: Descriptor

    @final
    class TagsEntry(Message):
        DESCRIPTOR: Descriptor

        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: str
        value: str
        def __init__(
            self,
            *,
            key: str = ...,
            value: str = ...,
        ) -> None: ...
        def ClearField(self, field_name: Literal["key", b"key", "value", b"value"]) -> None: ...

    HOSTNAME_FIELD_NUMBER: int
    ENV_FIELD_NUMBER: int
    TRACERPAYLOADS_FIELD_NUMBER: int
    TAGS_FIELD_NUMBER: int
    AGENTVERSION_FIELD_NUMBER: int
    TARGETTPS_FIELD_NUMBER: int
    ERRORTPS_FIELD_NUMBER: int
    RARESAMPLERENABLED_FIELD_NUMBER: int
    hostName: str
    """hostName specifies hostname of where the agent is running."""
    env: str
    """env specifies `env` set in agent configuration."""
    agentVersion: str
    """agentVersion specifies version of the agent."""
    targetTPS: float
    """targetTPS holds `TargetTPS` value in AgentConfig."""
    errorTPS: float
    """errorTPS holds `ErrorTPS` value in AgentConfig."""
    rareSamplerEnabled: bool
    """rareSamplerEnabled holds `RareSamplerEnabled` value in AgentConfig"""
    @property
    def tracerPayloads(self) -> RepeatedCompositeFieldContainer[TracerPayload]:
        """tracerPayloads specifies list of the payloads received from tracers."""

    @property
    def tags(self) -> ScalarMap[str, str]:
        """tags specifies tags common in all `tracerPayloads`."""

    def __init__(
        self,
        *,
        hostName: str = ...,
        env: str = ...,
        tracerPayloads: Iterable[TracerPayload] | None = ...,
        tags: Mapping[str, str] | None = ...,
        agentVersion: str = ...,
        targetTPS: float = ...,
        errorTPS: float = ...,
        rareSamplerEnabled: bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: Literal["agentVersion", b"agentVersion", "env", b"env", "errorTPS", b"errorTPS", "hostName", b"hostName", "rareSamplerEnabled", b"rareSamplerEnabled", "tags", b"tags", "targetTPS", b"targetTPS", "tracerPayloads", b"tracerPayloads"]) -> None: ...
