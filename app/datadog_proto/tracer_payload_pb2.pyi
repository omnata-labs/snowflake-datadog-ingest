"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

from builtins import (
    bool,
    int,
    str,
)
from collections.abc import (
    Iterable,
    Mapping,
)
from google.protobuf.descriptor import (
    Descriptor,
    FileDescriptor,
)
from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer,
    ScalarMap,
)
from google.protobuf.message import (
    Message,
)
from span_pb2 import (
    Span,
)
from typing import (
    Literal,
    final,
)

DESCRIPTOR: FileDescriptor

@final
class TraceChunk(Message):
    """TraceChunk represents a list of spans with the same trace ID. In other words, a chunk of a trace."""

    DESCRIPTOR: Descriptor

    @final
    class TagsEntry(Message):
        DESCRIPTOR: Descriptor

        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: str
        value: str
        def __init__(
            self,
            *,
            key: str = ...,
            value: str = ...,
        ) -> None: ...
        def ClearField(self, field_name: Literal["key", b"key", "value", b"value"]) -> None: ...

    PRIORITY_FIELD_NUMBER: int
    ORIGIN_FIELD_NUMBER: int
    SPANS_FIELD_NUMBER: int
    TAGS_FIELD_NUMBER: int
    DROPPEDTRACE_FIELD_NUMBER: int
    priority: int
    """priority specifies sampling priority of the trace.
    @gotags: json:"priority" msg:"priority"
    """
    origin: str
    """origin specifies origin product ("lambda", "rum", etc.) of the trace.
    @gotags: json:"origin" msg:"origin"
    """
    droppedTrace: bool
    """droppedTrace specifies whether the trace was dropped by samplers or not.
    @gotags: json:"dropped_trace" msg:"dropped_trace"
    """
    @property
    def spans(self) -> RepeatedCompositeFieldContainer[Span]:
        """spans specifies list of containing spans.
        @gotags: json:"spans" msg:"spans"
        """

    @property
    def tags(self) -> ScalarMap[str, str]:
        """tags specifies tags common in all `spans`.
        @gotags: json:"tags" msg:"tags"
        """

    def __init__(
        self,
        *,
        priority: int = ...,
        origin: str = ...,
        spans: Iterable[Span] | None = ...,
        tags: Mapping[str, str] | None = ...,
        droppedTrace: bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: Literal["droppedTrace", b"droppedTrace", "origin", b"origin", "priority", b"priority", "spans", b"spans", "tags", b"tags"]) -> None: ...

@final
class TracerPayload(Message):
    """TracerPayload represents a payload the trace agent receives from tracers."""

    DESCRIPTOR: Descriptor

    @final
    class TagsEntry(Message):
        DESCRIPTOR: Descriptor

        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: str
        value: str
        def __init__(
            self,
            *,
            key: str = ...,
            value: str = ...,
        ) -> None: ...
        def ClearField(self, field_name: Literal["key", b"key", "value", b"value"]) -> None: ...

    CONTAINERID_FIELD_NUMBER: int
    LANGUAGENAME_FIELD_NUMBER: int
    LANGUAGEVERSION_FIELD_NUMBER: int
    TRACERVERSION_FIELD_NUMBER: int
    RUNTIMEID_FIELD_NUMBER: int
    CHUNKS_FIELD_NUMBER: int
    TAGS_FIELD_NUMBER: int
    ENV_FIELD_NUMBER: int
    HOSTNAME_FIELD_NUMBER: int
    APPVERSION_FIELD_NUMBER: int
    containerID: str
    """containerID specifies the ID of the container where the tracer is running on.
    @gotags: json:"container_id" msg:"container_id"
    """
    languageName: str
    """languageName specifies language of the tracer.
    @gotags: json:"language_name" msg:"language_name"
    """
    languageVersion: str
    """languageVersion specifies language version of the tracer.
    @gotags: json:"language_version" msg:"language_version"
    """
    tracerVersion: str
    """tracerVersion specifies version of the tracer.
    @gotags: json:"tracer_version" msg:"tracer_version"
    """
    runtimeID: str
    """runtimeID specifies V4 UUID representation of a tracer session.
    @gotags: json:"runtime_id" msg:"runtime_id"
    """
    env: str
    """env specifies `env` tag that set with the tracer.
    @gotags: json:"env" msg:"env"
    """
    hostname: str
    """hostname specifies hostname of where the tracer is running.
    @gotags: json:"hostname" msg:"hostname"
    """
    appVersion: str
    """version specifies `version` tag that set with the tracer.
    @gotags: json:"app_version" msg:"app_version"
    """
    @property
    def chunks(self) -> RepeatedCompositeFieldContainer[TraceChunk]:
        """chunks specifies list of containing trace chunks.
        @gotags: json:"chunks" msg:"chunks"
        """

    @property
    def tags(self) -> ScalarMap[str, str]:
        """tags specifies tags common in all `chunks`.
        @gotags: json:"tags" msg:"tags"
        """

    def __init__(
        self,
        *,
        containerID: str = ...,
        languageName: str = ...,
        languageVersion: str = ...,
        tracerVersion: str = ...,
        runtimeID: str = ...,
        chunks: Iterable[TraceChunk] | None = ...,
        tags: Mapping[str, str] | None = ...,
        env: str = ...,
        hostname: str = ...,
        appVersion: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: Literal["appVersion", b"appVersion", "chunks", b"chunks", "containerID", b"containerID", "env", b"env", "hostname", b"hostname", "languageName", b"languageName", "languageVersion", b"languageVersion", "runtimeID", b"runtimeID", "tags", b"tags", "tracerVersion", b"tracerVersion"]) -> None: ...
