"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import sys

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions
from builtins import (
    bool,
    bytes,
    int,
    str,
    type,
)
from collections.abc import (
    Iterable,
)
from google.protobuf.descriptor import (
    Descriptor,
    EnumDescriptor,
    FileDescriptor,
)
from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer,
    RepeatedScalarFieldContainer,
)
from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper,
)
from google.protobuf.message import (
    Message,
)
from typing import (
    Literal,
    NewType,
    final,
)

DESCRIPTOR: FileDescriptor

class _Trilean:
    ValueType = NewType("ValueType", int)
    V: typing_extensions.TypeAlias = ValueType

class _TrileanEnumTypeWrapper(_EnumTypeWrapper[_Trilean.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    NOT_SET: _Trilean.ValueType  # 0
    TRUE: _Trilean.ValueType  # 1
    FALSE: _Trilean.ValueType  # 2

class Trilean(_Trilean, metaclass=_TrileanEnumTypeWrapper):
    """Trilean is an expanded boolean type that is meant to differentiate between being unset and false."""

NOT_SET: Trilean.ValueType  # 0
TRUE: Trilean.ValueType  # 1
FALSE: Trilean.ValueType  # 2

class _TraceRootFlag:
    ValueType = NewType("ValueType", int)
    V: typing_extensions.TypeAlias = ValueType

class _TraceRootFlagEnumTypeWrapper(_EnumTypeWrapper[_TraceRootFlag.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    DEPRECATED_NOT_SET: _TraceRootFlag.ValueType  # 0
    DEPRECATED_TRUE: _TraceRootFlag.ValueType  # 1
    DEPRECATED_FALSE: _TraceRootFlag.ValueType  # 2

class TraceRootFlag(_TraceRootFlag, metaclass=_TraceRootFlagEnumTypeWrapper): ...

DEPRECATED_NOT_SET: TraceRootFlag.ValueType  # 0
DEPRECATED_TRUE: TraceRootFlag.ValueType  # 1
DEPRECATED_FALSE: TraceRootFlag.ValueType  # 2

@final
class StatsPayload(Message):
    """protoc --gogofaster_out=. -I $GOPATH/src -I . stats.proto

    StatsPayload is the payload used to send stats from the agent to the backend.
    """

    DESCRIPTOR: Descriptor

    AGENTHOSTNAME_FIELD_NUMBER: int
    AGENTENV_FIELD_NUMBER: int
    STATS_FIELD_NUMBER: int
    AGENTVERSION_FIELD_NUMBER: int
    CLIENTCOMPUTED_FIELD_NUMBER: int
    SPLITPAYLOAD_FIELD_NUMBER: int
    agentHostname: str
    agentEnv: str
    agentVersion: str
    clientComputed: bool
    splitPayload: bool
    """splitPayload indicates if the payload is actually one of several payloads split out from a larger payload.
    This field can be used in the backend to signal if re-aggregation is necessary.
    """
    @property
    def stats(self) -> RepeatedCompositeFieldContainer[ClientStatsPayload]:
        """@gotags: json:"stats,omitempty" msg:"Stats,omitempty" """

    def __init__(
        self,
        *,
        agentHostname: str = ...,
        agentEnv: str = ...,
        stats: Iterable[ClientStatsPayload] | None = ...,
        agentVersion: str = ...,
        clientComputed: bool = ...,
        splitPayload: bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: Literal["agentEnv", b"agentEnv", "agentHostname", b"agentHostname", "agentVersion", b"agentVersion", "clientComputed", b"clientComputed", "splitPayload", b"splitPayload", "stats", b"stats"]) -> None: ...

@final
class ClientStatsPayload(Message):
    """ClientStatsPayload is the first layer of span stats aggregation. It is also
    the payload sent by tracers to the agent when stats in tracer are enabled.
    """

    DESCRIPTOR: Descriptor

    HOSTNAME_FIELD_NUMBER: int
    ENV_FIELD_NUMBER: int
    VERSION_FIELD_NUMBER: int
    STATS_FIELD_NUMBER: int
    LANG_FIELD_NUMBER: int
    TRACERVERSION_FIELD_NUMBER: int
    RUNTIMEID_FIELD_NUMBER: int
    SEQUENCE_FIELD_NUMBER: int
    AGENTAGGREGATION_FIELD_NUMBER: int
    SERVICE_FIELD_NUMBER: int
    CONTAINERID_FIELD_NUMBER: int
    TAGS_FIELD_NUMBER: int
    GIT_COMMIT_SHA_FIELD_NUMBER: int
    IMAGE_TAG_FIELD_NUMBER: int
    hostname: str
    """Hostname is the tracer hostname. It's extracted from spans with "_dd.hostname" meta
    or set by tracer stats payload when hostname reporting is enabled.
    """
    env: str
    """env tag set on spans or in the tracers, used for aggregation"""
    version: str
    """version tag set on spans or in the tracers, used for aggregation"""
    lang: str
    """informative field not used for aggregation"""
    tracerVersion: str
    """informative field not used for aggregation"""
    runtimeID: str
    """used on stats payloads sent by the tracer to identify uniquely a message"""
    sequence: int
    """used on stats payloads sent by the tracer to identify uniquely a message"""
    agentAggregation: str
    """AgentAggregation is set by the agent on tracer payloads modified by the agent aggregation layer
    characterizes counts only and distributions only payloads
    """
    service: str
    """Service is the main service of the tracer.
    It is part of unified tagging: https://docs.datadoghq.com/getting_started/tagging/unified_service_tagging
    """
    containerID: str
    """ContainerID specifies the origin container ID. It is meant to be populated by the client and may
    be enhanced by the agent to ensure it is unique.
    """
    git_commit_sha: str
    """The git commit SHA is obtained from a trace, where it may be set through a tracer <-> source code integration."""
    image_tag: str
    """The image tag is obtained from a container's set of tags."""
    @property
    def stats(self) -> RepeatedCompositeFieldContainer[ClientStatsBucket]:
        """@gotags: json:"stats,omitempty" msg:"Stats,omitempty" """

    @property
    def tags(self) -> RepeatedScalarFieldContainer[str]:
        """Tags specifies a set of tags obtained from the orchestrator (where applicable) using the specified containerID.
        This field should be left empty by the client. It only applies to some specific environment.
        """

    def __init__(
        self,
        *,
        hostname: str = ...,
        env: str = ...,
        version: str = ...,
        stats: Iterable[ClientStatsBucket] | None = ...,
        lang: str = ...,
        tracerVersion: str = ...,
        runtimeID: str = ...,
        sequence: int = ...,
        agentAggregation: str = ...,
        service: str = ...,
        containerID: str = ...,
        tags: Iterable[str] | None = ...,
        git_commit_sha: str = ...,
        image_tag: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: Literal["agentAggregation", b"agentAggregation", "containerID", b"containerID", "env", b"env", "git_commit_sha", b"git_commit_sha", "hostname", b"hostname", "image_tag", b"image_tag", "lang", b"lang", "runtimeID", b"runtimeID", "sequence", b"sequence", "service", b"service", "stats", b"stats", "tags", b"tags", "tracerVersion", b"tracerVersion", "version", b"version"]) -> None: ...

@final
class ClientStatsBucket(Message):
    """ClientStatsBucket is a time bucket containing aggregated stats."""

    DESCRIPTOR: Descriptor

    START_FIELD_NUMBER: int
    DURATION_FIELD_NUMBER: int
    STATS_FIELD_NUMBER: int
    AGENTTIMESHIFT_FIELD_NUMBER: int
    start: int
    """bucket start in nanoseconds"""
    duration: int
    """bucket duration in nanoseconds"""
    agentTimeShift: int
    """AgentTimeShift is the shift applied by the agent stats aggregator on bucket start
    when the received bucket start is outside of the agent aggregation window
    """
    @property
    def stats(self) -> RepeatedCompositeFieldContainer[ClientGroupedStats]:
        """@gotags: json:"stats,omitempty" msg:"Stats,omitempty" """

    def __init__(
        self,
        *,
        start: int = ...,
        duration: int = ...,
        stats: Iterable[ClientGroupedStats] | None = ...,
        agentTimeShift: int = ...,
    ) -> None: ...
    def ClearField(self, field_name: Literal["agentTimeShift", b"agentTimeShift", "duration", b"duration", "start", b"start", "stats", b"stats"]) -> None: ...

@final
class ClientGroupedStats(Message):
    """ClientGroupedStats aggregate stats on spans grouped by service, name, resource, status_code, type"""

    DESCRIPTOR: Descriptor

    SERVICE_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    RESOURCE_FIELD_NUMBER: int
    HTTP_STATUS_CODE_FIELD_NUMBER: int
    TYPE_FIELD_NUMBER: int
    DB_TYPE_FIELD_NUMBER: int
    HITS_FIELD_NUMBER: int
    ERRORS_FIELD_NUMBER: int
    DURATION_FIELD_NUMBER: int
    OKSUMMARY_FIELD_NUMBER: int
    ERRORSUMMARY_FIELD_NUMBER: int
    SYNTHETICS_FIELD_NUMBER: int
    TOPLEVELHITS_FIELD_NUMBER: int
    SPAN_KIND_FIELD_NUMBER: int
    PEER_TAGS_FIELD_NUMBER: int
    IS_TRACE_ROOT_FIELD_NUMBER: int
    service: str
    name: str
    resource: str
    HTTP_status_code: int
    type: str
    DB_type: str
    """db_type might be used in the future to help in the obfuscation step"""
    hits: int
    """count of all spans aggregated in the groupedstats"""
    errors: int
    """count of error spans aggregated in the groupedstats"""
    duration: int
    """total duration in nanoseconds of spans aggregated in the bucket"""
    okSummary: bytes
    """ddsketch summary of ok spans latencies encoded in protobuf"""
    errorSummary: bytes
    """ddsketch summary of error spans latencies encoded in protobuf"""
    synthetics: bool
    """set to true on spans generated by synthetics traffic"""
    topLevelHits: int
    """count of top level spans aggregated in the groupedstats"""
    span_kind: str
    """value of the span.kind tag on the span"""
    is_trace_root: Trilean.ValueType
    """this field's value is equal to span's ParentID == 0."""
    @property
    def peer_tags(self) -> RepeatedScalarFieldContainer[str]:
        """peer_tags are supplementary tags that further describe a peer entity
        E.g., `grpc.target` to describe the name of a gRPC peer, or `db.hostname` to describe the name of peer DB
        """

    def __init__(
        self,
        *,
        service: str = ...,
        name: str = ...,
        resource: str = ...,
        HTTP_status_code: int = ...,
        type: str = ...,
        DB_type: str = ...,
        hits: int = ...,
        errors: int = ...,
        duration: int = ...,
        okSummary: bytes = ...,
        errorSummary: bytes = ...,
        synthetics: bool = ...,
        topLevelHits: int = ...,
        span_kind: str = ...,
        peer_tags: Iterable[str] | None = ...,
        is_trace_root: Trilean.ValueType = ...,
    ) -> None: ...
    def ClearField(self, field_name: Literal["DB_type", b"DB_type", "HTTP_status_code", b"HTTP_status_code", "duration", b"duration", "errorSummary", b"errorSummary", "errors", b"errors", "hits", b"hits", "is_trace_root", b"is_trace_root", "name", b"name", "okSummary", b"okSummary", "peer_tags", b"peer_tags", "resource", b"resource", "service", b"service", "span_kind", b"span_kind", "synthetics", b"synthetics", "topLevelHits", b"topLevelHits", "type", b"type"]) -> None: ...
