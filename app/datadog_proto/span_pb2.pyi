"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

from builtins import (
    bytes,
    float,
    int,
    str,
)
from collections.abc import (
    Iterable,
    Mapping,
)
from google.protobuf.descriptor import (
    Descriptor,
    FileDescriptor,
)
from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer,
    ScalarMap,
)
from google.protobuf.message import (
    Message,
)
from typing import (
    Literal,
    final,
)

DESCRIPTOR: FileDescriptor

@final
class SpanLink(Message):
    DESCRIPTOR: Descriptor

    @final
    class AttributesEntry(Message):
        DESCRIPTOR: Descriptor

        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: str
        value: str
        def __init__(
            self,
            *,
            key: str = ...,
            value: str = ...,
        ) -> None: ...
        def ClearField(self, field_name: Literal["key", b"key", "value", b"value"]) -> None: ...

    TRACEID_FIELD_NUMBER: int
    TRACEID_HIGH_FIELD_NUMBER: int
    SPANID_FIELD_NUMBER: int
    ATTRIBUTES_FIELD_NUMBER: int
    TRACESTATE_FIELD_NUMBER: int
    FLAGS_FIELD_NUMBER: int
    traceID: int
    """@gotags: json:"trace_id" msg:"trace_id"
    Required.
    """
    traceID_high: int
    """@gotags: json:"trace_id_high" msg:"trace_id_high,omitempty"
    Optional. The high 64 bits of a referenced trace id.
    """
    spanID: int
    """@gotags: json:"span_id" msg:"span_id"
    Required.
    """
    tracestate: str
    """@gotags: msg:"tracestate,omitempty"
    Optional. W3C tracestate.
    """
    flags: int
    """@gotags: msg:"flags,omitempty"
    Optional. W3C trace flags. If set, the high bit (bit 31) must be set.
    """
    @property
    def attributes(self) -> ScalarMap[str, str]:
        """@gotags: msg:"attributes,omitempty"
        Optional. Simple mapping of keys to string values.
        """

    def __init__(
        self,
        *,
        traceID: int = ...,
        traceID_high: int = ...,
        spanID: int = ...,
        attributes: Mapping[str, str] | None = ...,
        tracestate: str = ...,
        flags: int = ...,
    ) -> None: ...
    def ClearField(self, field_name: Literal["attributes", b"attributes", "flags", b"flags", "spanID", b"spanID", "traceID", b"traceID", "traceID_high", b"traceID_high", "tracestate", b"tracestate"]) -> None: ...

@final
class Span(Message):
    DESCRIPTOR: Descriptor

    @final
    class MetaEntry(Message):
        DESCRIPTOR: Descriptor

        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: str
        value: str
        def __init__(
            self,
            *,
            key: str = ...,
            value: str = ...,
        ) -> None: ...
        def ClearField(self, field_name: Literal["key", b"key", "value", b"value"]) -> None: ...

    @final
    class MetricsEntry(Message):
        DESCRIPTOR: Descriptor

        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: str
        value: float
        def __init__(
            self,
            *,
            key: str = ...,
            value: float = ...,
        ) -> None: ...
        def ClearField(self, field_name: Literal["key", b"key", "value", b"value"]) -> None: ...

    @final
    class MetaStructEntry(Message):
        DESCRIPTOR: Descriptor

        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: str
        value: bytes
        def __init__(
            self,
            *,
            key: str = ...,
            value: bytes = ...,
        ) -> None: ...
        def ClearField(self, field_name: Literal["key", b"key", "value", b"value"]) -> None: ...

    SERVICE_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    RESOURCE_FIELD_NUMBER: int
    TRACEID_FIELD_NUMBER: int
    SPANID_FIELD_NUMBER: int
    PARENTID_FIELD_NUMBER: int
    START_FIELD_NUMBER: int
    DURATION_FIELD_NUMBER: int
    ERROR_FIELD_NUMBER: int
    META_FIELD_NUMBER: int
    METRICS_FIELD_NUMBER: int
    TYPE_FIELD_NUMBER: int
    META_STRUCT_FIELD_NUMBER: int
    SPANLINKS_FIELD_NUMBER: int
    service: str
    """service is the name of the service with which this span is associated.
    @gotags: json:"service" msg:"service"
    """
    name: str
    """name is the operation name of this span.
    @gotags: json:"name" msg:"name"
    """
    resource: str
    """resource is the resource name of this span, also sometimes called the endpoint (for web spans).
    @gotags: json:"resource" msg:"resource"
    """
    traceID: int
    """traceID is the ID of the trace to which this span belongs.
    @gotags: json:"trace_id" msg:"trace_id"
    """
    spanID: int
    """spanID is the ID of this span.
    @gotags: json:"span_id" msg:"span_id"
    """
    parentID: int
    """parentID is the ID of this span's parent, or zero if this span has no parent.
    @gotags: json:"parent_id" msg:"parent_id"
    """
    start: int
    """start is the number of nanoseconds between the Unix epoch and the beginning of this span.
    @gotags: json:"start" msg:"start"
    """
    duration: int
    """duration is the time length of this span in nanoseconds.
    @gotags: json:"duration" msg:"duration"
    """
    error: int
    """error is 1 if there is an error associated with this span, or 0 if there is not.
    @gotags: json:"error" msg:"error"
    """
    type: str
    """type is the type of the service with which this span is associated.  Example values: web, db, lambda.
    @gotags: json:"type" msg:"type"
    """
    @property
    def meta(self) -> ScalarMap[str, str]:
        """meta is a mapping from tag name to tag value for string-valued tags.
        @gotags: json:"meta,omitempty" msg:"meta,omitempty"
        """

    @property
    def metrics(self) -> ScalarMap[str, float]:
        """metrics is a mapping from tag name to tag value for numeric-valued tags.
        @gotags: json:"metrics,omitempty" msg:"metrics,omitempty"
        """

    @property
    def meta_struct(self) -> ScalarMap[str, bytes]:
        """meta_struct is a registry of structured "other" data used by, e.g., AppSec.
        @gotags: json:"meta_struct,omitempty" msg:"meta_struct,omitempty"
        """

    @property
    def spanLinks(self) -> RepeatedCompositeFieldContainer[SpanLink]:
        """span_links represents a collection of links, where each link defines a causal relationship between two spans.
        @gotags: json:"span_links,omitempty" msg:"span_links,omitempty"
        """

    def __init__(
        self,
        *,
        service: str = ...,
        name: str = ...,
        resource: str = ...,
        traceID: int = ...,
        spanID: int = ...,
        parentID: int = ...,
        start: int = ...,
        duration: int = ...,
        error: int = ...,
        meta: Mapping[str, str] | None = ...,
        metrics: Mapping[str, float] | None = ...,
        type: str = ...,
        meta_struct: Mapping[str, bytes] | None = ...,
        spanLinks: Iterable[SpanLink] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: Literal["duration", b"duration", "error", b"error", "meta", b"meta", "meta_struct", b"meta_struct", "metrics", b"metrics", "name", b"name", "parentID", b"parentID", "resource", b"resource", "service", b"service", "spanID", b"spanID", "spanLinks", b"spanLinks", "start", b"start", "traceID", b"traceID", "type", b"type"]) -> None: ...
