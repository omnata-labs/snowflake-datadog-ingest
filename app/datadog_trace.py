# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: datadog/trace/span.proto, datadog/trace/tracer_payload.proto, datadog/trace/stats.proto, datadog/trace/agent_payload.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict, List

import betterproto


class Trilean(betterproto.Enum):
    """
    Trilean is an expanded boolean type that is meant to differentiate between
    being unset and false.
    """

    NOT_SET = 0
    TRUE = 1
    FALSE = 2


class TraceRootFlag(betterproto.Enum):
    DEPRECATED_NOT_SET = 0
    DEPRECATED_TRUE = 1
    DEPRECATED_FALSE = 2


@dataclass
class SpanLink(betterproto.Message):
    # @gotags: json:"trace_id" msg:"trace_id"
    trace_i_d: int = betterproto.uint64_field(1)
    # @gotags: json:"trace_id_high" msg:"trace_id_high,omitempty"
    trace_i_d_high: int = betterproto.uint64_field(2)
    # @gotags: json:"span_id" msg:"span_id"
    span_i_d: int = betterproto.uint64_field(3)
    # @gotags: msg:"attributes,omitempty"
    attributes: Dict[str, str] = betterproto.map_field(
        4, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    # @gotags: msg:"tracestate,omitempty"
    tracestate: str = betterproto.string_field(5)
    # @gotags: msg:"flags,omitempty"
    flags: int = betterproto.uint32_field(6)


@dataclass
class Span(betterproto.Message):
    # service is the name of the service with which this span is associated.
    # @gotags: json:"service" msg:"service"
    service: str = betterproto.string_field(1)
    # name is the operation name of this span. @gotags: json:"name" msg:"name"
    name: str = betterproto.string_field(2)
    # resource is the resource name of this span, also sometimes called the
    # endpoint (for web spans). @gotags: json:"resource" msg:"resource"
    resource: str = betterproto.string_field(3)
    # traceID is the ID of the trace to which this span belongs. @gotags:
    # json:"trace_id" msg:"trace_id"
    trace_i_d: int = betterproto.uint64_field(4)
    # spanID is the ID of this span. @gotags: json:"span_id" msg:"span_id"
    span_i_d: int = betterproto.uint64_field(5)
    # parentID is the ID of this span's parent, or zero if this span has no
    # parent. @gotags: json:"parent_id" msg:"parent_id"
    parent_i_d: int = betterproto.uint64_field(6)
    # start is the number of nanoseconds between the Unix epoch and the beginning
    # of this span. @gotags: json:"start" msg:"start"
    start: int = betterproto.int64_field(7)
    # duration is the time length of this span in nanoseconds. @gotags:
    # json:"duration" msg:"duration"
    duration: int = betterproto.int64_field(8)
    # error is 1 if there is an error associated with this span, or 0 if there is
    # not. @gotags: json:"error" msg:"error"
    error: int = betterproto.int32_field(9)
    # meta is a mapping from tag name to tag value for string-valued tags.
    # @gotags: json:"meta,omitempty" msg:"meta,omitempty"
    meta: Dict[str, str] = betterproto.map_field(
        10, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    # metrics is a mapping from tag name to tag value for numeric-valued tags.
    # @gotags: json:"metrics,omitempty" msg:"metrics,omitempty"
    metrics: Dict[str, float] = betterproto.map_field(
        11, betterproto.TYPE_STRING, betterproto.TYPE_DOUBLE
    )
    # type is the type of the service with which this span is associated.
    # Example values: web, db, lambda. @gotags: json:"type" msg:"type"
    type: str = betterproto.string_field(12)
    # meta_struct is a registry of structured "other" data used by, e.g., AppSec.
    # @gotags: json:"meta_struct,omitempty" msg:"meta_struct,omitempty"
    meta_struct: Dict[str, bytes] = betterproto.map_field(
        13, betterproto.TYPE_STRING, betterproto.TYPE_BYTES
    )
    # span_links represents a collection of links, where each link defines a
    # causal relationship between two spans. @gotags: json:"span_links,omitempty"
    # msg:"span_links,omitempty"
    span_links: List["SpanLink"] = betterproto.message_field(14)


@dataclass
class TraceChunk(betterproto.Message):
    """
    TraceChunk represents a list of spans with the same trace ID. In other
    words, a chunk of a trace.
    """

    # priority specifies sampling priority of the trace. @gotags: json:"priority"
    # msg:"priority"
    priority: int = betterproto.int32_field(1)
    # origin specifies origin product ("lambda", "rum", etc.) of the trace.
    # @gotags: json:"origin" msg:"origin"
    origin: str = betterproto.string_field(2)
    # spans specifies list of containing spans. @gotags: json:"spans" msg:"spans"
    spans: List["Span"] = betterproto.message_field(3)
    # tags specifies tags common in all `spans`. @gotags: json:"tags" msg:"tags"
    tags: Dict[str, str] = betterproto.map_field(
        4, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    # droppedTrace specifies whether the trace was dropped by samplers or not.
    # @gotags: json:"dropped_trace" msg:"dropped_trace"
    dropped_trace: bool = betterproto.bool_field(5)


@dataclass
class TracerPayload(betterproto.Message):
    """
    TracerPayload represents a payload the trace agent receives from tracers.
    """

    # containerID specifies the ID of the container where the tracer is running
    # on. @gotags: json:"container_id" msg:"container_id"
    container_i_d: str = betterproto.string_field(1)
    # languageName specifies language of the tracer. @gotags:
    # json:"language_name" msg:"language_name"
    language_name: str = betterproto.string_field(2)
    # languageVersion specifies language version of the tracer. @gotags:
    # json:"language_version" msg:"language_version"
    language_version: str = betterproto.string_field(3)
    # tracerVersion specifies version of the tracer. @gotags:
    # json:"tracer_version" msg:"tracer_version"
    tracer_version: str = betterproto.string_field(4)
    # runtimeID specifies V4 UUID representation of a tracer session. @gotags:
    # json:"runtime_id" msg:"runtime_id"
    runtime_i_d: str = betterproto.string_field(5)
    # chunks specifies list of containing trace chunks. @gotags: json:"chunks"
    # msg:"chunks"
    chunks: List["TraceChunk"] = betterproto.message_field(6)
    # tags specifies tags common in all `chunks`. @gotags: json:"tags" msg:"tags"
    tags: Dict[str, str] = betterproto.map_field(
        7, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    # env specifies `env` tag that set with the tracer. @gotags: json:"env"
    # msg:"env"
    env: str = betterproto.string_field(8)
    # hostname specifies hostname of where the tracer is running. @gotags:
    # json:"hostname" msg:"hostname"
    hostname: str = betterproto.string_field(9)
    # version specifies `version` tag that set with the tracer. @gotags:
    # json:"app_version" msg:"app_version"
    app_version: str = betterproto.string_field(10)


@dataclass
class StatsPayload(betterproto.Message):
    """
    StatsPayload is the payload used to send stats from the agent to the
    backend.
    """

    agent_hostname: str = betterproto.string_field(1)
    agent_env: str = betterproto.string_field(2)
    # @gotags: json:"stats,omitempty" msg:"Stats,omitempty"
    stats: List["ClientStatsPayload"] = betterproto.message_field(3)
    agent_version: str = betterproto.string_field(4)
    client_computed: bool = betterproto.bool_field(5)
    # splitPayload indicates if the payload is actually one of several payloads
    # split out from a larger payload. This field can be used in the backend to
    # signal if re-aggregation is necessary.
    split_payload: bool = betterproto.bool_field(6)


@dataclass
class ClientStatsPayload(betterproto.Message):
    """
    ClientStatsPayload is the first layer of span stats aggregation. It is also
    the payload sent by tracers to the agent when stats in tracer are enabled.
    """

    # Hostname is the tracer hostname. It's extracted from spans with
    # "_dd.hostname" meta or set by tracer stats payload when hostname reporting
    # is enabled.
    hostname: str = betterproto.string_field(1)
    env: str = betterproto.string_field(2)
    version: str = betterproto.string_field(3)
    # @gotags: json:"stats,omitempty" msg:"Stats,omitempty"
    stats: List["ClientStatsBucket"] = betterproto.message_field(4)
    lang: str = betterproto.string_field(5)
    tracer_version: str = betterproto.string_field(6)
    runtime_i_d: str = betterproto.string_field(7)
    sequence: int = betterproto.uint64_field(8)
    # AgentAggregation is set by the agent on tracer payloads modified by the
    # agent aggregation layer characterizes counts only and distributions only
    # payloads
    agent_aggregation: str = betterproto.string_field(9)
    # Service is the main service of the tracer. It is part of unified tagging:
    # https://docs.datadoghq.com/getting_started/tagging/unified_service_tagging
    service: str = betterproto.string_field(10)
    # ContainerID specifies the origin container ID. It is meant to be populated
    # by the client and may be enhanced by the agent to ensure it is unique.
    container_i_d: str = betterproto.string_field(11)
    # Tags specifies a set of tags obtained from the orchestrator (where
    # applicable) using the specified containerID. This field should be left
    # empty by the client. It only applies to some specific environment.
    tags: List[str] = betterproto.string_field(12)
    # The git commit SHA is obtained from a trace, where it may be set through a
    # tracer <-> source code integration.
    git_commit_sha: str = betterproto.string_field(13)
    # The image tag is obtained from a container's set of tags.
    image_tag: str = betterproto.string_field(14)


@dataclass
class ClientStatsBucket(betterproto.Message):
    """ClientStatsBucket is a time bucket containing aggregated stats."""

    start: int = betterproto.uint64_field(1)
    duration: int = betterproto.uint64_field(2)
    # @gotags: json:"stats,omitempty" msg:"Stats,omitempty"
    stats: List["ClientGroupedStats"] = betterproto.message_field(3)
    # AgentTimeShift is the shift applied by the agent stats aggregator on bucket
    # start when the received bucket start is outside of the agent aggregation
    # window
    agent_time_shift: int = betterproto.int64_field(4)


@dataclass
class ClientGroupedStats(betterproto.Message):
    """
    ClientGroupedStats aggregate stats on spans grouped by service, name,
    resource, status_code, type
    """

    service: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)
    resource: str = betterproto.string_field(3)
    h_t_t_p_status_code: int = betterproto.uint32_field(4)
    type: str = betterproto.string_field(5)
    d_b_type: str = betterproto.string_field(6)
    hits: int = betterproto.uint64_field(7)
    errors: int = betterproto.uint64_field(8)
    duration: int = betterproto.uint64_field(9)
    ok_summary: bytes = betterproto.bytes_field(10)
    error_summary: bytes = betterproto.bytes_field(11)
    synthetics: bool = betterproto.bool_field(12)
    top_level_hits: int = betterproto.uint64_field(13)
    span_kind: str = betterproto.string_field(15)
    # peer_tags are supplementary tags that further describe a peer entity E.g.,
    # `grpc.target` to describe the name of a gRPC peer, or `db.hostname` to
    # describe the name of peer DB
    peer_tags: List[str] = betterproto.string_field(16)
    is_trace_root: "Trilean" = betterproto.enum_field(17)


@dataclass
class AgentPayload(betterproto.Message):
    """AgentPayload represents payload the agent sends to the intake."""

    # hostName specifies hostname of where the agent is running.
    host_name: str = betterproto.string_field(1)
    # env specifies `env` set in agent configuration.
    env: str = betterproto.string_field(2)
    # tracerPayloads specifies list of the payloads received from tracers.
    tracer_payloads: List["TracerPayload"] = betterproto.message_field(5)
    # tags specifies tags common in all `tracerPayloads`.
    tags: Dict[str, str] = betterproto.map_field(
        6, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    # agentVersion specifies version of the agent.
    agent_version: str = betterproto.string_field(7)
    # targetTPS holds `TargetTPS` value in AgentConfig.
    target_t_p_s: float = betterproto.double_field(8)
    # errorTPS holds `ErrorTPS` value in AgentConfig.
    error_t_p_s: float = betterproto.double_field(9)
    # rareSamplerEnabled holds `RareSamplerEnabled` value in AgentConfig
    rare_sampler_enabled: bool = betterproto.bool_field(10)
